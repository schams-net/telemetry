#!/bin/bash
# ==============================================================================
# Pending Updates
# https://schams.net/telemetry
# ...
# ==============================================================================

CURRENTSCRIPT="$0"

CONFIGURATION_FILE="/etc/default/telemetry"
TELEMETRY_API_ACTION="PendingUpdates"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
[ -f "${CONFIGURATION_FILE}" ] && . "${CONFIGURATION_FILE}"

# Check if module "pending updates" is enabled
if [ ! "${TELEMETRY_REPORT_PENDING_UPDATES}" = "true" ]; then
	exit 0
fi

# Check if required commands are available and executable
# @TODO check and update
COMMANDS_REQUIRED="apt-get base64 curl hostname sed sort wc"
for COMMAND in ${COMMANDS_REQUIRED}; do
	TEMP=$(which ${COMMAND})
	if [ $? -ne 0 -o "${TEMP}" = "" ]; then
		echo "Error: \"${COMMAND}\" not installed or not executable."
		exit 1
	elif [ ! -x ${TEMP} ]; then
		echo "Error: \"${COMMAND}\" not executable."
		exit 1
	fi
done

# Check if API endpoint is configured properly
if [ "${TELEMETRY_API_ENDPOINT}" = "" -o "${TELEMETRY_API_VERSION}" = "" ]; then
	echo "Error: Telemetry API endpoint not set. Check configuration file \"${CONFIGURATION_FILE}\"."
	exit 1
fi

HOSTNAME_SHORT=$(hostname --short)
HOSTNAME_LONG=$(hostname --long)

CURL_OPTIONS=""

# Add ClientID and API key to the HTTP request if available
if [ ! "${TELEMETRY_CLIENT_ID}" = "" ]; then
	TELEMETRY_CLIENT_ID=$(echo "${TELEMETRY_CLIENT_ID}" | sed 's/[^a-zA-Z0-9]//g')
	CURL_OPTIONS="${CURL_OPTIONS} --header \"x-client-id: ${TELEMETRY_CLIENT_ID}\""
fi
if [ ! "${TELEMETRY_API_KEY}" = "" ]; then
	TELEMETRY_API_KEY=$(echo "${TELEMETRY_API_KEY}" | sed 's/[^a-zA-Z0-9]//g')
	CURL_OPTIONS="${CURL_OPTIONS} --header \"x-api-key: ${TELEMETRY_API_KEY}\""
fi

#CURL_OPTIONS="${CURL_OPTIONS} --silent --show-error --request POST --header 'Content-type: application/json'"

# ------------------------------------------------------------------------------
# ...

#apt-get -s upgrade | grep -i security | egrep "^Inst" | grep -v 'Debian\:' | perl -p -e's/^Inst\s+([^\s]*?)\s+(\[[^\[]*\]).*\n$/$1\\\n/'
#apt-get -s upgrade | egrep "^Inst " | grep -v 'Debian\:' | perl -p -e's/^Inst\s+([^\s]*?)\s+(\[[^\[]*\]).*\n$/$1\\\n/'
PENDING_UPDATES=$(apt-get -s upgrade 2>&1 | egrep "^Inst " | sed 's/[[:space:]]\{1,\}/ /g' | sort)

if [ ! "${PENDING_UPDATES}" = "" ]; then

#	Inst libnghttp2-14 [1.18.1-1+deb9u1] (1.18.1-1+deb9u2 Debian-Security:9/oldoldstable [amd64])
#	Inst gitlab-ce [14.3.3-ce.0] (14.4.0-ce.0 gitlab-ce:1/buster [amd64])
#	action package [current] (new type... [arch])

	IFS=$'\t\n'
	for UPDATE in ${PENDING_UPDATES}; do
		SECURITY=$(echo "${UPDATE}" | grep -i security)
		if [ ! "${SECURITY}" = "" ]; then SECURITY="security" ; fi
		LINE=$(echo -n "${UPDATE}" | sed 's/^Inst \([^ ]*\) \[\([^ ]*\)\] (\([^ ]*\).*)$/\1|\2|\3/g')
		LINE="${LINE}|${SECURITY}"
		DATA="${DATA}\n${LINE}"
	done

	DATA=$(echo -e "${DATA}" | grep '.' | base64 --wrap 0)
	STATUS="{\"PendingUpdates\": \"${DATA}\"}"

	#curl --silent --request POST --header 'Content-type: application/json' --data "${STATUS}" ${TELEMETRY_API_ENDPOINT} > /dev/null
	#curl ${CURL_OPTIONS} --silent --request POST --header 'Content-type: application/json' --data "${STATUS}" ${TELEMETRY_API_ENDPOINT}/${TELEMETRY_API_VERSION}/${TELEMETRY_API_ACTION}
	echo "${TELEMETRY_API_ENDPOINT}/${TELEMETRY_API_VERSION}/${TELEMETRY_API_ACTION}"
	echo "${STATUS}"
fi

# ==============================================================================
# EOF
